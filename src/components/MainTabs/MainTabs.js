import React, { useState } from 'react';
import { services } from '../../data/services';
import { sendToN8N, formatScenarioForN8N } from '../../utils/n8nWebhook';
import ServiceCard from '../ServiceCard/ServiceCard';
import ScenarioDescription from '../ScenarioDescription/ScenarioDescription';
// import ServiceSelection from '../ServiceSelection/ServiceSelection';
import TimeAndTone from '../TimeAndTone/TimeAndTone';
import './MainTabs.css';

const MainTabs = () => {
  const [activeMainTab, setActiveMainTab] = useState('services');
  const [activeServiceTab, setActiveServiceTab] = useState('all');
  const [selectedService, setSelectedService] = useState(null);
  const [submissionStatus, setSubmissionStatus] = useState({
    isSubmitting: false,
    isWaitingWorkflow: false,
    message: '',
    googleSheetsUrl: ''
  });
  
  // Scenario data
  const [scenarioData, setScenarioData] = useState({
    description: '',
    selectedServices: [],
    duration: '',
    tone: '',
    targetAudience: '',
    additionalNotes: '',
    style: '',
    callToAction: ''
  });

  const mainTabs = [
    {
      id: 'services',
      name: 'D·ªãch v·ª• & Ch·ªçn d·ªãch v·ª•',
      icon: 'üè•',
      desc: 'Xem chi ti·∫øt v√† ch·ªçn d·ªãch v·ª•'
    },
    {
      id: 'scenario-description',
      name: 'M√¥ t·∫£ k·ªãch b·∫£n',
      icon: 'üìù',
      desc: 'Vi·∫øt n·ªôi dung k·ªãch b·∫£n'
    },
    {
      id: 'time-tone',
      name: 'Th·ªùi gian & Tone',
      icon: '‚è∞',
      desc: 'C√†i ƒë·∫∑t th·ªùi l∆∞·ª£ng v√† phong c√°ch'
    }
  ];

  const serviceCategories = [
    { id: 'all', name: 'T·∫•t c·∫£ d·ªãch v·ª•', icon: 'üè•' },
    { id: 'N√¢ng ng·ª±c', name: 'N√¢ng ng·ª±c', icon: 'üíé' },
    { id: 'T·∫°o h√¨nh c∆° th·ªÉ', name: 'T·∫°o h√¨nh c∆° th·ªÉ', icon: 'üí™' },
    { id: 'Th·∫©m m·ªπ m·∫∑t', name: 'Th·∫©m m·ªπ m·∫∑t', icon: '‚ú®' },
    { id: 'Th·∫©m m·ªπ m·∫Øt', name: 'Th·∫©m m·ªπ m·∫Øt', icon: 'üëÅÔ∏è' },
    { id: 'Ch·ªëng l√£o h√≥a', name: 'Ch·ªëng l√£o h√≥a', icon: '‚è∞' },
    { id: 'Chuy·ªÉn gi·ªõi', name: 'Chuy·ªÉn gi·ªõi', icon: 'üè≥Ô∏è‚Äç‚ößÔ∏è' },
    { id: 'Combo', name: 'Combo', icon: 'üíØ' }
  ];

  const filteredServices = activeServiceTab === 'all' 
    ? services 
    : services.filter(service => service.category === activeServiceTab);

  const handleServiceClick = (service) => {
    setSelectedService(service);
  };

  const closeServiceDetail = () => {
    setSelectedService(null);
  };

  const handleScenarioDataUpdate = (data) => {
    setScenarioData(prev => ({
      ...prev,
      ...data
    }));
  };

  const handleSubmitScenario = async () => {
    // NgƒÉn nhi·ªÅu l·∫ßn submission
    if (submissionStatus.isSubmitting || submissionStatus.isWaitingWorkflow) {
      console.log('Submission already in progress, ignoring...');
      return;
    }

    console.log('=== STARTING SUBMISSION PROCESS ===');
    try {
      // B·∫Øt ƒë·∫ßu qu√° tr√¨nh g·ª≠i
      console.log('Setting submission status to submitting...');
      setSubmissionStatus({
        isSubmitting: true,
        isWaitingWorkflow: false,
        message: 'ƒêang g·ª≠i k·ªãch b·∫£n ƒë·∫øn N8N...',
        googleSheetsUrl: ''
      });

      const selectedServiceDetails = services.filter(service => 
        scenarioData.selectedServices.includes(service.id)
      );
      
      const formattedData = formatScenarioForN8N(scenarioData, selectedServiceDetails);
      const result = await sendToN8N(formattedData);
      
      if (result.success) {
        // ƒê√£ g·ª≠i th√†nh c√¥ng, ch·ªù workflow x·ª≠ l√Ω
        setSubmissionStatus({
          isSubmitting: false,
          isWaitingWorkflow: true,
          message: 'K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! ƒêang x·ª≠ l√Ω workflow...',
          googleSheetsUrl: ''
        });

        // Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω workflow (trong th·ª±c t·∫ø s·∫Ω nh·∫≠n t·ª´ webhook response)
        setTimeout(() => {
          setSubmissionStatus({
            isSubmitting: false,
            isWaitingWorkflow: false,
            message: 'Ho√†n th√†nh! K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.',
            googleSheetsUrl: result.googleSheetsUrl
          });

          // T·ª± ƒë·ªông m·ªü Google Sheets sau 2 gi√¢y
          setTimeout(() => {
            if (result.googleSheetsUrl) {
              window.open(result.googleSheetsUrl, '_blank');
            }
          }, 2000);
        }, 5000); // Gi·∫£ l·∫≠p 5 gi√¢y x·ª≠ l√Ω

        // Reset form sau khi ho√†n th√†nh
        setTimeout(() => {
          setScenarioData({
            description: '',
            selectedServices: [],
            duration: '',
            tone: '',
            targetAudience: '',
            additionalNotes: '',
            style: '',
            callToAction: ''
          });
          setSubmissionStatus({
            isSubmitting: false,
            isWaitingWorkflow: false,
            message: '',
            googleSheetsUrl: ''
          });
          setActiveMainTab('services');
          console.log('=== SUBMISSION PROCESS COMPLETED AND RESET ===');
        }, 8000); // Reset sau 8 gi√¢y
        
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error('Error submitting scenario:', error);
      setSubmissionStatus({
        isSubmitting: false,
        isWaitingWorkflow: false,
        message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i k·ªãch b·∫£n. Vui l√≤ng th·ª≠ l·∫°i!',
        googleSheetsUrl: ''
      });
      
      // Reset error sau 3 gi√¢y
      setTimeout(() => {
        setSubmissionStatus({
          isSubmitting: false,
          isWaitingWorkflow: false,
          message: '',
          googleSheetsUrl: ''
        });
      }, 3000);
    }
  };

  const isFormComplete = scenarioData.description && scenarioData.selectedServices.length > 0 && scenarioData.duration && scenarioData.tone;

  const renderContent = () => {
    switch (activeMainTab) {
      case 'services':
        return (
          <div className="services-content">
            <div className="service-tabs">
              {serviceCategories.map(category => (
                <button
                  key={category.id}
                  className={`service-tab-button ${activeServiceTab === category.id ? 'active' : ''}`}
                  onClick={() => setActiveServiceTab(category.id)}
                >
                  <span className="tab-icon">{category.icon}</span>
                  <span className="tab-text">{category.name}</span>
                </button>
              ))}
            </div>

            <div className="services-grid">
              {filteredServices.map(service => (
                <div 
                  key={service.id} 
                  className={`service-item ${scenarioData.selectedServices.includes(service.id) ? 'selected' : ''}`}
                  onClick={() => {
                    const newSelected = scenarioData.selectedServices.includes(service.id)
                      ? scenarioData.selectedServices.filter(id => id !== service.id)
                      : [...scenarioData.selectedServices, service.id];
                    handleScenarioDataUpdate({ selectedServices: newSelected });
                  }}
                >
                  <div className="service-checkbox">
                    {scenarioData.selectedServices.includes(service.id) && <span>‚úì</span>}
                  </div>
                  <div className="service-icon">{service.icon}</div>
                  <h3 className="service-name">{service.name}</h3>
                  <p className="service-short-desc">{service.shortDesc}</p>
                  <div className="service-meta">
                    <span className="service-duration">‚è±Ô∏è {service.duration}</span>
                    <span className="service-recovery">üîÑ {service.recovery}</span>
                  </div>
                  <button 
                    className="service-detail-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleServiceClick(service);
                    }}
                  >
                    Xem chi ti·∫øt ‚Üí
                  </button>
                </div>
              ))}
            </div>

            {scenarioData.selectedServices.length > 0 && (
              <div className="selected-services-summary">
                <h4 className="summary-title">
                  D·ªãch v·ª• ƒë√£ ch·ªçn ({scenarioData.selectedServices.length})
                </h4>
                <div className="selected-services-list">
                  {services.filter(service => 
                    scenarioData.selectedServices.includes(service.id)
                  ).map(service => (
                    <div key={service.id} className="selected-service-item">
                      <span className="service-icon">{service.icon}</span>
                      <span className="service-name">{service.name}</span>
                      <button
                        className="remove-service-btn"
                        onClick={() => {
                          const newSelected = scenarioData.selectedServices.filter(id => id !== service.id);
                          handleScenarioDataUpdate({ selectedServices: newSelected });
                        }}
                      >
                        ‚úï
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        );

      case 'scenario-description':
        return (
          <ScenarioDescription 
            data={scenarioData}
            onDataUpdate={handleScenarioDataUpdate}
          />
        );

      case 'time-tone':
        return (
          <TimeAndTone 
            data={scenarioData}
            onDataUpdate={handleScenarioDataUpdate}
          />
        );

      default:
        return null;
    }
  };

  return (
    <section className="main-tabs-section">
      <div className="container">
        <div className="section-header">
          <h2 className="section-title">D·ªãch v·ª• & T·∫°o k·ªãch b·∫£n</h2>
          <p className="section-subtitle">
            Kh√°m ph√° d·ªãch v·ª• v√† t·∫°o k·ªãch b·∫£n qu·∫£ng c√°o chuy√™n nghi·ªáp
          </p>
        </div>

        <div className="main-tabs-container">
          <div className="main-tab-navigation">
            {mainTabs.map(tab => (
              <button
                key={tab.id}
                className={`main-tab-button ${activeMainTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveMainTab(tab.id)}
              >
                <span className="tab-icon">{tab.icon}</span>
                <div className="tab-info">
                  <span className="tab-name">{tab.name}</span>
                  <span className="tab-desc">{tab.desc}</span>
                </div>
                {activeMainTab === tab.id && <div className="tab-indicator"></div>}
              </button>
            ))}
          </div>

          <div className="tab-content">
            {renderContent()}
          </div>

          {(activeMainTab === 'scenario-description' || activeMainTab === 'time-tone' || (activeMainTab === 'services' && scenarioData.selectedServices.length > 0)) && (
            <div className="scenario-actions">
              <div className="progress-info">
                <span className="progress-text">
                  Ho√†n th√†nh: {Object.values(scenarioData).filter(val => 
                    Array.isArray(val) ? val.length > 0 : val !== ''
                  ).length}/7 b∆∞·ªõc
                </span>
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ width: `${(Object.values(scenarioData).filter(val => 
                      Array.isArray(val) ? val.length > 0 : val !== ''
                    ).length / 7) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Status notification */}
              {console.log('SUBMISSION STATUS:', submissionStatus)}
              {(submissionStatus.isSubmitting || submissionStatus.isWaitingWorkflow || submissionStatus.message) && (
                <div className={`submission-status ${submissionStatus.isSubmitting || submissionStatus.isWaitingWorkflow ? 'processing' : submissionStatus.googleSheetsUrl ? 'success' : 'error'}`}>
                  <div className="status-content">
                    {submissionStatus.isSubmitting && (
                      <div className="status-loading">
                        <div className="loading-spinner"></div>
                        <span>ƒêang g·ª≠i...</span>
                      </div>
                    )}
                    {submissionStatus.isWaitingWorkflow && (
                      <div className="status-loading">
                        <div className="loading-dots">
                          <span></span><span></span><span></span>
                        </div>
                        <span>ƒêang x·ª≠ l√Ω workflow...</span>
                      </div>
                    )}
                    <p className="status-message">{submissionStatus.message}</p>
                    {submissionStatus.googleSheetsUrl && (
                      <div className="status-success">
                        <span className="success-icon">‚úÖ</span>
                        <a href={submissionStatus.googleSheetsUrl} target="_blank" rel="noopener noreferrer" className="sheets-link">
                          üìä M·ªü Google Sheets
                        </a>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              <div className="action-buttons">
                <button 
                  className="preview-btn"
                  disabled={!isFormComplete || submissionStatus.isSubmitting || submissionStatus.isWaitingWorkflow}
                  onClick={() => console.log('Preview:', scenarioData)}
                >
                  <span className="btn-icon">üëÅÔ∏è</span>
                  Xem tr∆∞·ªõc
                </button>
                <button 
                  className="submit-btn"
                  disabled={!isFormComplete || submissionStatus.isSubmitting || submissionStatus.isWaitingWorkflow}
                  onClick={() => {
                    console.log('SUBMIT BUTTON CLICKED!');
                    console.log('Form complete:', isFormComplete);
                    console.log('Current submission status:', submissionStatus);
                    handleSubmitScenario();
                  }}
                >
                  <span className="btn-icon">
                    {submissionStatus.isSubmitting ? '‚è≥' : submissionStatus.isWaitingWorkflow ? 'üîÑ' : 'üöÄ'}
                  </span>
                  {submissionStatus.isSubmitting ? 'ƒêang g·ª≠i...' : 
                   submissionStatus.isWaitingWorkflow ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫°o k·ªãch b·∫£n'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {selectedService && (
        <ServiceCard 
          service={selectedService} 
          onClose={closeServiceDetail}
        />
      )}
    </section>
  );
};

export default MainTabs;